import {NextRequest, NextResponse} from "next/server";import {getSession} from "@/app/lib/auth";const guestRoutes = [    '/login',    '/sign-up',]//always are accessible by guest or auth usersconst noCheckRoutes = [    '/'];export async function middleware(request: NextRequest) {    if (isNoCheckRouts(request)) {        return NextResponse.next()    }    return handleRoutes(request);}function isNoCheckRouts(request: NextRequest) {    for (let u of noCheckRoutes) {        if (typeof u === 'string' && u === request.nextUrl.pathname) {            return true;        }    }    return false;}async function handleRoutes(request: NextRequest) {    if (guestRoutes.includes(request.nextUrl.pathname)) {        return await handleGuestRoutes(request);    }    return await handlePrivateRoutes(request);}async function handlePrivateRoutes(request: NextRequest) {    const session = await getSession();    if (!session || !session?.authorization) {        return redirectToLogin(request);    }    return NextResponse.next();}async function handleGuestRoutes(request: NextRequest) {    const session = await getSession();    if (session) {        return await redirectToDashboard(request);    }    return NextResponse.next();}function redirectToLogin(request: NextRequest) {    return NextResponse.redirect(new URL('/login', request.url))}async function redirectToDashboard(request: NextRequest) {    return NextResponse.redirect(new URL('/dashboard', request.url))}export const config = {    matcher: [        /*         * Match all request paths except for the ones starting with:         * - api (API routes)         * - _next/static (static files)         * - _next/image (image optimization files)         * - icon.ico (favicon file)         */        {            source: '/((?!api|_next/static|_next/image|icon.ico|icons|images|flags|logo.svg).*)',            missing: [                {type: 'header', key: 'next-router-prefetch'},                {type: 'header', key: 'purpose', value: 'prefetch'},            ],        },    ],}