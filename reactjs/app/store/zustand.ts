import {create} from 'zustand'import {createJSONStorage, persist} from 'zustand/middleware'import {User} from "@/app/types";import SecureStorage from "@/app/store/secure-storage";export type ObjectAction = {    object: any;    action: 'logout' | 'delete';    yesBtn?: string;    noBtn?: string;    title: string;    message: string;    onConfirmed: () => Promise<boolean>}type ACTIONS = {    setUser: (user: User) => void;    reset: () => void;    setObjectAction: (objectAction: ObjectAction | null) => void;}type STATE = {    user: User | null;    objectAction: null | ObjectAction}export type Store = ACTIONS & STATEconst initialState = {    user: null,    objectAction: null}export const useStore = create<Store>()(    persist(        (set, get) => ({            ...initialState,            setUser: (user: User) => set({user: user}),            reset: () => set(initialState),            setObjectAction: ((objectAction: ObjectAction | null) => set({objectAction: objectAction})),        }),        {            name: 'real-time-chat-storage', // name of the item in the storage (must be unique)            storage: createJSONStorage(() => SecureStorage),            partialize: state => ({                user: state.user            })        }    ))